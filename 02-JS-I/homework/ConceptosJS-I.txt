// VARIABLES
   
    Una variable almacena un tipo de dato al igual como lo hace una ecuación aritmética
    Toda variable tiene un nombre y almacena un tipo de dato
    Existen tres tipos de variables:

    1. var
    // Es una variable que SI puede cambiar su valor y su scope es local.
    var string = 'Mike'
    var suma = 10+20

    Los nombres de las variables anteriores son: string y suma
    El nombre de una variable no puede contener números (solo letras), ejm: var 123 = null
    Esto arrojará un error en el output

    Toda variable almacena un tipo de dato al otro lado de la igualdad
    Puede ser un número, un string u otro tipo de dato
    Del ejemplo anterior los datos son: el string 'Mike' y el número 10+20

    // La misma lógica aplica para las variables 2(let) y 3(const).

    2. let
    // Es una variable que también podrá cambiar su valor, pero solo funcionará en el bloque donde fue creada.

    3. const
    // Es una constante la cual NO cambiará su valor en ningún momento en el futuro.



// STRINGS

    // Un string es un bloque de texto, siempre va encerrado entre comillas (simple o doble)
    Ejemplo:
    var ciudad='Valencia'
    let nombre='Mariano'
    const mes='Agosto'

    De los ejemplos anteriores, los strings respectivos son: Valencia, Mariano y Agosto



// FUNCIONES (argumentos, sentencia)
   
    // El comando 'function' representa a una función que pedirá realizar algo
    // Las funciones son un llamado a la accción que piden retornar algo
    // Las funciones requieren de uno o mas códigos para ejecutarse correctamente

    Al igual que las variables, las funciones también se componen de Nombre y Tipo de dato
    El tipo de dato que almacena la función se llama argumento y va colocado entre paréntesis

    function miFunction(num)

    Del ejemplo anterior, el nombre de la función es 'miFunction' y el argumento 'num'

    La estructura completa de una función es la siguiente:

    function miFunction(num){
        código
    }

    Para ejecutarse correctamente una función, debe tener la estructura anterior presentada
    El bloque entre llaves debe contener almenos un código

    // Declaración 'return'

    Si agregamos return al ejemplo anterior, podemos construir algo así:

    function miFunction(num) {
        return num**2
    }     

    Esto indica que si escribo miFunction(10), me retornará el argumento elevado al cuadrado, osea 100

    En conclusión, la declaración return representa una orden para la función dada
    La orden de retornar algo, ese algo que se ha indicado allí



// DECLARACIONES if

    // También conocido como statement (sentencia)
    // Este tipo de declaración representa una condicional para la función dada
    // Existen otros statements comúnmente usados como, "switch", "continue"

    Por ejemplo:

    function suma(a,b) {
        if (a+b===10) {
            return true
        } else {
            return false
        }
    }

    Esto quiere decir que se ha aplicado una condición para la funcion 'suma'
    Se ha pedido que si la suma de a+b es estrictamente igual a 10, retorne true; de lo contrario retorne false
    Si escribimos en la consola:
    suma(4,6)
    entonces retornará true, sin embargo
    suma(2,3)
    retornará false

    Otra forma de usar el statement if es "if + else if + else"
    Por ejemplo:

    function esPositivo(numero) {
      if (numero>0) {
        return "Es positivo"
      } else if(numero<0) {
        return "Es negativo"
      } else {
        return false
        }
    }


    ** SWITCH

    La declaración switch evalúa una expresión, comparando el valor de esa expresión con una instancia case
    y ejecuta declaraciones asociadas a ese case, así como las declaraciones en los case que siguiente

    Sintaxis

    switch (expresión) {
    case valor1:
    //Declaraciones ejecutadas cuando el resultado de expresión coincide con el valor1
    [break;]
    case valor2:
    //Declaraciones ejecutadas cuando el resultado de expresión coincide con el valor2
    [break;]
     ...
    case valorN:
    //Declaraciones ejecutadas cuando el resultado de expresión coincide con valorN
    [break;]
     default:
    //Declaraciones ejecutadas cuando ninguno de los valores coincide con el valor de la expresión
    [break;]
    }

    expresión: Es una expresión que es comparada con el valor de cada instancia case
    case valorN: Una instancia case "valorN" es usada para comparar con la expresión
                 Si la expresión coincide con el "valorN", las declaraciones dentro de la instancia case se ejecutan
                 hasta que se encuentre el final de la declaración "switch" o hasta encontrar una interrupción "break"
    default: Una instancia default, cuando es declarada, es ejecutada si el valor de la expresión no coincide con
             cualquiera de las otras instancias "case valorN"             

    Ejemplo:

    function colors(color) {
      switch(color) {
        case "blue":
          return "This is blue"
        case "red":
          return "This is red"
        case "green":
          return "This is green"
        case "orange":
          return "This is orange"    
        default:
          return "Color not found"
        }
    }    

    ** CONTINUE

    Termina la ejecución de las sentencias de la iteración actual del bucle actual o la etiqueta y continua
    la ejecución del bucle con la próxima iteración

    Sintaxis

    continue [ label ]

    label: identificador asociado con la etiqueta de la sentencia

    Descripción

    En contraste con la sentencia break, "continue" no termina la ejecución del bucle por completo, en cambio
        En un bucle "while", salta de regreo a la condición
        En un bucle "for", salta a la expresión actualizada

    Ejemplo:

    i = 0;
    n = 0;
    while (i < 5) {
      i++;
      if (i == 3)
        continue;
      n += i;
    }

    El ejemplo muestra un bucle "while" que tiene una sentencia continue que se ejecuta
    cuando el valor de "i" es 3. Así, n toma los valores 1,3,7 y 12



// VALORES BOOLEANOS (true,false)

    // Los booleanos son un tipo de dato primitivo
    // Un booleano tiene 2 posibles valores: true(verdadero) o false(falso)



// EXTRA: OBJETO Math.

    Math es un objeto incorporado que tiene propiedades y métodos par constantes y funciones matemáticas
    No es un objeto de función
    Math funciona con el tipo Number. No funciona con BigInt

    Descripción

    A diferencia de los demás objetos globales, el objeto Math no se puede editar. Todas las propiedades y 
    métodos de Math son estáticos. Usted se puede referir a la constante PI como Math.PI y puede llamar a
    la función seno como Math.sin(x), donde "x" es el argumento del método

    Propiedades

    Math.E
        Constante de Euler, la base de los logaritmos naturales, aproximadamente 2.718.
    Math.LN2
        Logaritmo natural de 2, aproximadamente 0.693.
    Math.LN10
        Logaritmo natural de 10, aproximadamente 2.303.
    Math.LOG2E
        Logaritmo de E con base 2, aproximadamente 1.443.
    Math.LOG10E
        Logaritmo de E con base 10, aproximadamente 0.434.
    Math.PI
        Radio de la circunferencia de un circulo respecto a su diámetro, aproximadamente 3.14159.
    Math.SQRT1_2
        Raíz cuadrada de 1/2; Equivalentemente, 1 sobre la raíz cuadrada de 2, aproximadamente 0.707.
    Math.SQRT2
        Raíz cuadrada de 2, aproximadamente 1.414.

    Métodos

    Tenga en cuenta que las funciones trigonométricas sin(), cos(), tan(), asin(), acos(), atan(), atan2()
    devuelven ángulos en radianes. Para convertir radianes a grados, divida por (Math.PI / 180)
    y multiplique por esto para convertir a la inversa

    Tenga en cuenta que muchas de las funciones matemáticas tienen una presición que es dependiente de la
    implementación. Esto significa que los diferentes navegadores pueden dar un resultado diferente, e incluso
    el mismo motor de JS en un sistema operativo o arquitectura diferente puede dar resultados diferentes

    Math.abs(x)
        Devuelve el valor absoluto de un número.
    Math.acos(x)
        Devuelve el arco coseno de un número.
    Math.acosh(x)
        Devuelve el arco coseno hiperbólico de un número.
    Math.asin(x)
        Devuelve el arco seno de un número.
    Math.asinh(x)
        Devuelve el arco seno hiperbólico de un número.
    Math.atan(x)
        Devuelve el arco tangente de un número.
    Math.atanh(x)
        Devuelve el arco tangente hiperbólico de un número.
    Math.atan2(y, x)
        Devuelve el arco tangente del cuociente de sus argumentos.
    Math.cbrt(x)
        Devuelve la raíz cúbica de un número.
    Math.ceil(x)
        Devuelve el entero más pequeño mayor o igual que un número.
    Math.clz32(x) (en-US)
        Devuelve el número de ceros iniciales de un entero de 32 bits.
    Math.cos(x)
        Devuelve el coseno de un número.
    Math.cosh(x) (en-US)
        Devuelve el coseno hiperbólico de un número.
    Math.exp(x)
        Devuelve Ex, donde x es el argumento, y E es la constante de Euler (2.718...), la base de los logaritmos naturales.
    Math.expm1(x)
        Devuelve ex - 1.
    Math.floor(x)
        Devuelve el mayor entero menor que o igual a un número.
    Math.fround(x) (en-US)
        Devuelve la representación flotante de precisión simple más cercana de un número.
    Math.hypot([x[, y[, …]]])
        Devuelve la raíz cuadrada de la suma de los cuadrados de sus argumentos.
    Math.imul(x, y) (en-US)
        Devuelve el resultado de una multiplicación de enteros de 32 bits.
    Math.log(x)
        Devuelve el logaritmo natural (log, también ln) de un número.
    Math.log1p(x) (en-US)
        Devuelve el logaritmo natural de x + 1 (loge, también ln) de un número.
    Math.log10(x)
        Devuelve el logaritmo en base 10 de x.
    Math.log2(x)
        Devuelve el logaritmo en base 2 de x.
    Math.max([x[, y[, …]]])
        Devuelve el mayor de cero o más números.
    Math.min([x[, y[, …]]])
        Devuelve el más pequeño de cero o más números.
    Math.pow(x, y)
        Las devoluciones de base a la potencia de exponente, que es, baseexponent.
    Math.random()
        Devuelve un número pseudo-aleatorio entre 0 y 1.
    Math.round(x)
        Devuelve el valor de un número redondeado al número entero más cercano.
    Math.sign(x)
        Devuelve el signo de la x, que indica si x es positivo, negativo o cero.   
    Math.sin(x)
        Devuelve el seno de un número.
    Math.sinh(x) (en-US)
        Devuelve el seno hiperbólico de un número.
    Math.sqrt(x)
        Devuelve la raíz cuadrada positiva de un número.
    Math.tan(x)
        Devuelve la tangente de un número.
    Math.tanh(x)
        Devuelve la tangente hiperbólica de un número.
    Math.trunc(x)
        Devuelve la parte entera del número x, la eliminación de los dígitos fraccionarios.


    // EXTRA: OBJETO toString

    Devuelve una cadena que representa el objeto

    var objeto = new Object();
    objeto.toString(); // Devuelve [object Object]

    Ejemplos

    El siguiente código define el tipo de objeto "Perro" y crea "elPerro", un objeto de tipo Perro:

    function Perro(nombre,criadero,color,sexo) {
      this.nombre=nombre;
      this.criadero=criadero;
      this.color=color;
      this.sexo=sexo;
    }

    elPerro = new Perro("Gabby","Laboratorio","chocolate","femenino")

    Si llama al método toString en el objeto personalizado, devuelve el valor predeterminado heredado de Object:

    elPerro.toString() //devuelve [object Object]

    El siguiente código crea y asigna perroToString para sobreescribir el método predeterminado toString
    Esta función genera una cadena que contiene nombre, criadero, color, y sexo del objeto, en la forma "propiedad = valor"

    Perro.prototype.toString = function perroToString() {
      var retorno = "Perro " + this.nombre + " es " + this.sexo + " " + this.color + " " + this.criadero;
      return retorno;
    }

    Con el código precedente en su lugar, cualquier vez que se use elDog en un contexto de una cadena,
    JavaScript automáticamente llamará a la función perroToString, la cuál devuelve la siguiente cadena:

    Perro Gabby es femenino chocolate Laboratorio



    // EXTRA: OBJETO tocharAt

    El método charAt() de String devuelve en un nuevo String el carácter UTF-16 de una cadena

    Sintaxis

    str.charAt(indice)

    indice: un entero entre 0 y 1 menos que la longitud de la cadena. Si no se proporciona ningún indice
            charAt() utilizará 0

    Descripción

    Los caracteres de una cadena se indexan de izquierda a derecha
    El índice del primer caracter es 0, y el índice del último caracter en una cadena llamada "nombreCadena" es "nombreCadena.length - 1"
    Si el "indice" que usted proporciona está fuera del rango, JavaScript devuelve una cadena vacía       

    Ejemplos

    El siguiente ejemplo muestra caracteres de diferentes localizaciones en la cadena "Brave new world":

    var cualquierCadena = "Brave new world";

    console.log("El carácter en el índice 0 es '" + cualquierCadena.charAt(0) + "'")
    console.log("El carácter en el índice 1 es '" + cualquierCadena.charAt(1) + "'")
    console.log("El carácter en el índice 2 es '" + cualquierCadena.charAt(2) + "'")
    console.log("El carácter en el índice 3 es '" + cualquierCadena.charAt(3) + "'")
    console.log("El carácter en el índice 4 es '" + cualquierCadena.charAt(4) + "'")
    console.log("El carácter en el índice 999 es '" + cualquierCadena.charAt(999) + "'")

    Estas líneas muestran lo siguiente:

    El carácter en el índice 0 es 'B'
    El carácter en el índice 1 es 'r'
    El carácter en el índice 2 es 'a'
    El carácter en el índice 3 es 'v'
    El carácter en el índice 4 es 'e'
    El carácter en el índice 999 es ''
    