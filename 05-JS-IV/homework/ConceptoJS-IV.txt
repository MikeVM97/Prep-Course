OBJETOS

    DESCRIPCIÓN
    
        Los objetos, al igual que los Arrays, son contenedores que sostienen colecciones de datos
        Los objetos contienen mucha información sobre una sola cosa
        Los objetos se instancian usando llaves: {}


    SINTAXIS

        const nuevoObjeto = {
            clave1 : valor1,
            .
            .
            .
            claveN : valorN
        }

        nuevoObjeto : el nombre con el cual se identificará el objeto
        clave       : una propiedad del objeto
        valor       : el dato que contiene la propiedad; pueden ser una cadena, un número, booleano, matriz, función o incluso otro objeto

        Ejemplo1:

        const user1 = {
            username: 'juan perez',
            password: '123456',
            lovesJavascript: true,
            favoriteNumber: 34
        }

        Ejemplo2:

        const user2 = {
            username: 'maria jimenez',
            password: '654321',
            lovesJavascript: false,
            favoriteNumber: 22,
            decirHola: function () {
                console.log ('Hola a todos')
            }
        }


    ACCEDER A LOS VALORES

        Podemos acceder a los valores de un objeto, llamando al nombre del objeto y la clave
        Hay dos formas diferentes de hacer esto, usando puntos o usando corchetes

        user1.favoriteNumber; // 34
        user2.decirHola();    // Hola a todos  

        user1['username'];    // juan perez
        user2['password'];    // 654321    


    ASIGNACIÓN DE VALORES

        Asignar valores funciona igual que acceder a ellos. Podemos asignarlos cuando creamos el objeto, usando puntos o usando corchetes

        const newUser  = {
            esNuevo = true    
        }

        const loveJSstring = 'lovesJavascript'

        newUser.username = 'mario diaz'
        newUser['password'] = 'newPassword123456'
        newUser[loveJSstring] = true 



PROPIEDADES

        Para eliminar una propiedad, podemos hacerlo usando la palabra clave delete

        const nuevoObjeto = {
            eliminarEstaPropiedad = true
        }

        delete nuevoObjeto.eliminarEstaPropiedad



MÉTODOS

        En los objetos, los valores se pueden establecer en funciones
        Las funciones guardadas en un objeto se denominan métodos
        Para llamar a este método, usaremos notación de puntos (.) y paréntesis finales ()

        const nuevoObjeto = {
            decirHola: function () {
                console.log ('Hola a todo el mundo!')
            }
        }

        nuevoObjeto.decirHola();    //  Hola a todo el mundo!
        
         

BUCLE FOR..IN

    DESCRIPCIÓN

        Funciona igual que el Bucle for, con la diferencia que ahora (for..in) es para objetos   

        Ejemplo:

        const alumnos = {
            username: juan perez,
            password: 123456,
            lovesJavascript: true,
            favoriteNumber: 24
        }

        for (let clave in alumnos) {
            console.log (clave)
            console.log (alumnos[clave])
        }    

        // username
        // 'juan perez'
        // password
        // '123456'
        // lovesJavascript
        // true
        // favoriteNumber
        // 24


    La Palabra Clave This

        Los objetos tienen una palabra clave autorreferencial que se puede aplicar a cada objeto llamado this
        Cuando se llama dentro de un objeto, se refierea a ese mismo objeto
        This puede usarse para acceder a otras claves en el mismo objeto, y es muy útil en métodos

        const alumnos = {
            username: juan perez,
            password: 123456,
            lovesJavascript: true,
            favoriteNumber: 24
            decirHola: function() {
                console.log (this.username + ' manda saludos!')
            }
        }

        usuario.decirHola() //  'juan perez manda saludos' 

    THIS Y EL CONTEXTO DE EJECUCIÓN

    Contexto Global Inicial

        Este es el caso cuando ejecutamos código en el contexto global (afuera de cualquier función)
        En este caso "this" hace referencia al objeto global, en el cao del browser hace referencia a window

        // En el browser esto es verdad:

        > console.log (this === window)
        < true

        > this.a = 37

        > console.log (window.a)
        < 37 

    En el contexto de una función

        Cuando estamos dentro de una función, el valor de "this" va a depender de como sea invocada la función

        > function f1() {
            return this
        }

        > f1() === window
        < true

        > window.fi() === window
        < true

        En este ejemplo la función es invocada por el objeto global, por lo tanto "this" hará referencia a window
        Si usamos el modo "strict" de Javascript, el ejemplo devolverá undefined, ya que no deja al intérprete asumir que this es el objeto global

    Como método de un objeto

        Cuando usamos el keyword "this" dentro de una función que es un método de un objeto,
        "this" hace referencia al objeto sobre el cual se llamo el método

        > var o = {
            prop: 37
            f: function() {
                return this.prop
            }
        }

        > console.log (o.f())
        < 37

        Pero si definimos la función afuera:

        > var o = {prop: 37}

        > function loguea() {
            return this.prop
        }

        > o.f = loguea
        < 37

        De todos modos, se debe tener mucho cuidado con "this", ya que pueden aparecer casos en donde es contra intuitivo

        > var obj = {
            nombre: 'Objeto',
            log: function() {
                this.nombre = 'Cambiado'
                console.log (this)

                var cambia = function (str) {
                    this.nombre = str
                }
                cambia ('Hola!!')
                console.log (this)
            }
        }

        Si ejecutamos el código de arriba, notaremos que la propiedad "nombre" de "obj" contiene el valor "Cambiado" y no 'Hola!!'
        Esto se debe a que el keyword "this" dentro de la función "cambia" NO hace referencia a "obj", si no que hace referencia al objeto global
        No podemos considerar "this" como "obj" porque la función no es método de este Objeto
        De hecho, si buscamos dentro del objeto global la variable "nombre", vamos a encontrar con el valor 'Hola!!' que seteamos con la función "cambia"
        Esto quiere decir que no importa donde estuvo declarada la función, si no CÓMO LA INVOCAMOS

        Para resolver este tipo de problemas, existe un patrón muy común que se basa en guardar la referencia al objeto que está en "this"
        antes de entrar a una función donde no sé a ciencia cierta que valor puede tomar "this"

        var obj = {
            nombre: 'Objeto',
            log: function() {
                this.nombre = 'Cambiado'
                console.log (this)

                var that = this

                var cambia = function (str) {
                    that.nombre = str
                }
                cambia ('Hola!!')
                console.log (this)
            }
        }

        De esta forma, "that" (puede tener cualquier nombre) va a apuntar al objeto "obj"
        Ahora si, podemos usar "that" en vez de "this" y estar seguros qué es lo que va a tener adentro



NOTACIÓN DE PUNTOS vs NOTACIÓN DE CORCHETES

        Ya sabemos que estas notaciones sirven para ACCEDER A LOS VALORES de las claves de un objeto
        Ahora abordaremos en qúe se diferencian y porqué deberiamos tener cuidado al usarlos

        La notación de puntos es la forma más facil de usar para el acceso a un valor, pero tiene
        la característica que solo se puede acceder a todos los valores en conjunto que contiene la clave a ser llamado

        Por otro lado, la notación de corchetes nos permite acceder a un valor específico (si así lo deseamos)
        dentro de una clave que podría contener muchos valores
